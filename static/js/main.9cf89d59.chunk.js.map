{"version":3,"sources":["constants/surveyConstants.js","reducers/surveyReducers.js","store.js","components/SurveyList/SurveyList.js","actions/surveyActions.js","components/NewSurvey/NewSurvey.js","common/Header.js","App.js","index.js"],"names":["SURVEY_ADD_ITEM","SURVEY_REMOVE_ITEM","SURVEY_EDIT_ITEM","ALL_SURVEYS","id","text","dropdownVal","label","value","reducer","combineReducers","surveyList","state","surveys","action","type","item","payload","surveyToBeEdited","updatedSurveys","map","coursesurvey","filter","survey","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","SurveyList","props","useState","surveyId","setsurveyId","history","useHistory","dispatchHook","useDispatch","useSelector","useEffect","dispatch","getState","console","log","className","index","onClick","name","checked","onChange","ddl","length","push","disabled","NewSurvey","enteredText","setEnteredText","foundEdit","setFoundEdit","selected","setSelected","match","params","found","findUserHandler","onSubmit","event","preventDefault","editedData","dataToBeUpdated","Math","random","toString","data","target","options","MultiSelectValues","labelledBy","Header","App","allSurveys","find","element","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9cf89d59.chunk.js","sourcesContent":["export const SURVEY_LIST_SUCCESS = \"SURVEY_LIST_SUCCESS\";\r\nexport const SURVEY_ADD_ITEM = \"SURVEY_ADD_ITEM\";\r\nexport const SURVEY_REMOVE_ITEM = \"SURVEY_REMOVE_ITEM\";\r\nexport const SURVEY_EDIT_ITEM = \"SURVEY_EDIT_ITEM\";\r\n\r\n","import {   \r\n    SURVEY_ADD_ITEM,\r\n    SURVEY_REMOVE_ITEM,\r\n    SURVEY_EDIT_ITEM\r\n  } from \"../constants/surveyConstants\";\r\n \r\n  // test surveys\r\n  const ALL_SURVEYS = [\r\n    { id: \"cg1\", text: \"test-Training Feedback\",\r\n    dropdownVal:[\r\n      {  label: \"self-paced modules\",value:\"spm\"  },\r\n      {  label: \"classroom modules\",value:\"cm\"  },\r\n    ]},\r\n    { id: \"cg2\", text: \"External COntent Rating\",\r\n    dropdownVal:[\r\n      {  label: \"classroom modules\",value:\"cm\"  },\r\n    ] },\r\n    { id: \"cg3\", text: \"HTrainer Effectiveness\",\r\n    dropdownVal:[{  label: \"journeys\",value:\"js\"  },],\r\n  },\r\n  ] \r\n\r\n  export const surveyListReducer = (state = { surveys: ALL_SURVEYS }, action) => {\r\n    switch (action.type) {     \r\n      case SURVEY_ADD_ITEM:\r\n          const item = action.payload;\r\n          return {\r\n            ...state,\r\n            surveys:[...state.surveys,item]\r\n          }    \r\n      case SURVEY_EDIT_ITEM:  \r\n        // action.payload-{id,text,dropdoenVal};\r\n        const surveyToBeEdited = action.payload;\r\n        // update the survey if survey id exists\r\n        const updatedSurveys=state.surveys.map((coursesurvey)=>{\r\n          if (coursesurvey.id === surveyToBeEdited.id) {\r\n            return { ...surveyToBeEdited, text: surveyToBeEdited.text,dropdownVal:surveyToBeEdited.dropdownVal };\r\n          } else {\r\n            return coursesurvey;\r\n          }\r\n        })\r\n        return{\r\n          ...state,\r\n          surveys:updatedSurveys\r\n        }\r\n      case SURVEY_REMOVE_ITEM:        \r\n        return{\r\n          ...state,\r\n          surveys:state.surveys.filter((survey)=>{\r\n            return survey.id!==action.payload;\r\n          })\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n      \r\n  ","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { surveyListReducer } from \"./reducers/surveyReducers\";\r\n\r\n// combine reducers\r\nconst reducer = combineReducers({\r\n  surveyList: surveyListReducer,\r\n});\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\nexport default store;\r\n","import React,{useState,useEffect} from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listSurveys,removeSurvey } from \"../../actions/surveyActions\";\r\nconst SurveyList = (props) => {\r\n  const [surveyId,setsurveyId]=useState(null);\r\n  const history = useHistory();\r\n  const dispatchHook = useDispatch();\r\n  const surveyList = useSelector((state) => state.surveyList);\r\n  const { surveys } = surveyList;\r\n  useEffect(() => {\r\n    dispatchHook(listSurveys());\r\n  }, [dispatchHook]);\r\n  useEffect(()=>{\r\n    console.log(\"surveys from redux\",surveys);\r\n  },[surveys])\r\n  // Add New Survey\r\n  const addNewHandler=()=>{\r\n    history.push('/surveys-redux/addNewSurvey');\r\n  }\r\n  // Edit Survey\r\n  const editHandler=()=>{\r\n    history.push(`/surveys-redux/editSurvey/${surveyId}`);\r\n  }\r\n// //  Delete Survey\r\nconst deleteHandler=()=>{\r\n  dispatchHook(removeSurvey(surveyId));\r\n  \r\n}\r\n  const handleRadioButton=(id)=>{    \r\n    setsurveyId(id);\r\n  }\r\n  // JSX--SurveyList\r\n  return (\r\n    <section id=\"posts\">\r\n    <div className=\"container\">\r\n    <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <h4>Latest Posts</h4>\r\n            </div>\r\n          \r\n      <br/>\r\n      {/* table */}\r\n      <div>\r\n      <table className='table table-striped'>\r\n       <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th>&nbsp;</th>\r\n              <th>Survey Template Name</th>\r\n              <th>Applicable For</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n            surveys.map((survey,index) => {       \r\nreturn <tr key={survey.id} onClick={()=>handleRadioButton(survey.id)} >     \r\n      <td className=\"pr-0\">\r\n      <div className=\"form-check-inline mr-0\">\r\n  <label className=\"form-check-label\">\r\n    <input type=\"radio\" \r\n    className=\"form-check-input mr-0\"\r\n          name=\"site_name\" \r\n          value={survey.id}\r\n          checked={surveyId === survey.id} \r\n          onChange={()=>{}}\r\n          />\r\n  </label>\r\n</div>\r\n        </td>                            \r\n      <td>{survey.text}</td>\r\n      <td>{survey.dropdownVal&&survey.dropdownVal.map((ddl,index)=>\r\n      {     \r\n        return <span key={ddl.label+index}>{ddl.label} {index !== (survey.dropdownVal.length-1) ? ',' : ''}</span>\r\n      }      \r\n      )}</td>     \r\n              </tr>\r\n            })\r\n            }\r\n          </tbody>      \r\n    </table>\r\n    {/* Buttons */}\r\n    <div>\r\n      <button onClick={addNewHandler} className=\"btn btn-primary btn-block\"> <i className=\"fas fa-plus\"></i> Add New</button>\r\n      <button onClick={editHandler} className=\"btn btn-warning btn-block\" disabled={!surveyId?true:false}><i className=\"fas fa-pencil-alt\"></i> Edit</button>\r\n      <button onClick={deleteHandler} className=\"btn btn-danger btn-block\" disabled={!surveyId?true:false}><i className=\"fas fa-trash\"></i> Delete</button>\r\n    </div>\r\n      </div>\r\n      <br />    \r\n      </div>\r\n      {/* card ends*/} \r\n    </div>\r\n    {/* col-md-9 ends*/}     \r\n    </div>  \r\n    {/* row ends*/}     \r\n      </div> \r\n      {/* container ends*/}     \r\n    </section>\r\n  );\r\n};\r\nexport default SurveyList;","import {\r\n  SURVEY_LIST_SUCCESS,\r\n  SURVEY_ADD_ITEM,\r\n  SURVEY_REMOVE_ITEM,\r\n  SURVEY_EDIT_ITEM\r\n} from \"../constants/surveyConstants\";\r\n// display all surveys\r\nexport const listSurveys=()=>(dispatch, getState)=>{  \r\n dispatch({ type: SURVEY_LIST_SUCCESS, payload: getState().surveyList.surveys });\r\n}\r\n// add a survey\r\nexport const addSurvey=(data) => (dispatch) => {\r\n  dispatch({\r\n    type: SURVEY_ADD_ITEM,\r\n    payload: data,\r\n  });\r\n}\r\n//remove a survey - @params(surveyId)\r\nexport const removeSurvey = (id) => (dispatch, getState) => {\r\n  dispatch({\r\n    type: SURVEY_REMOVE_ITEM,\r\n    payload: id,\r\n  });\r\n};\r\n//edit a survey - @params(edited data)\r\nexport const editSurvey=(dataToBeUpdated)=>(dispatch, getState)=>{\r\n  dispatch({\r\n    type: SURVEY_EDIT_ITEM,\r\n    payload: dataToBeUpdated,\r\n  });\r\n}","import React, { useState,useEffect } from 'react';\r\nimport { useHistory } from \"react-router\";\r\nimport { MultiSelect } from \"react-multi-select-component\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addSurvey ,editSurvey} from \"../../actions/surveyActions\";\r\n\r\nconst NewSurvey = props => {\r\n  const history = useHistory();\r\n  const [enteredText, setEnteredText] = useState('');\r\n  const [foundEdit,setFoundEdit]=useState('');  \r\n  const [selected, setSelected] = useState([]);\r\n  const dispatchHook = useDispatch();\r\n\r\n  //get existing data based on survey id from url\r\n  const surveyId = props.match.params.surveyId;\r\n  useEffect(()=>{\r\n    if(surveyId){\r\n      const found=props.findUserHandler(surveyId);      \r\n      //if existing data populate textboxes with data\r\n      if(found){\r\n        setFoundEdit(found);\r\n        setEnteredText(found.text);\r\n        setSelected(found.dropdownVal)\r\n      }\r\n    }\r\n  },[surveyId,props]);  \r\n  // Form Submit Event\r\n  const SurveyFormHandler = event => {\r\n    event.preventDefault();\r\n    if(surveyId){\r\n      // Edit Survey  \r\n      const editedData={\r\n        id: foundEdit.id,\r\n        text: enteredText,\r\n        dropdownVal:selected\r\n      }\r\n      dispatchHook(editSurvey(editedData));\r\n    }else{\r\n      // Add Survey\r\n      const NewSurvey = {\r\n        id: Math.random().toString(),\r\n        text: enteredText,\r\n        dropdownVal:selected\r\n      };\r\n      setEnteredText('');\r\n    // props.onAddsurvey(NewSurvey);\r\n    dispatchHook(addSurvey(NewSurvey));\r\n    }      \r\n    history.push('/surveys-redux');\r\n  };\r\n  const textChangeHandler = event => {\r\n    setEnteredText(event.target.value);\r\n  }; \r\n  // JSX--NewSurvey\r\n  return (\r\n    <section id=\"details\">\r\n <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n      <div className=\"card\">\r\n            <div className=\"card-header\">\r\n            <h1>{surveyId?\"Edit Survey\":\"Add Survey\"}</h1>\r\n            </div>\r\n            <div className=\"card-body\">\r\n\r\n          \r\n      <form className=\"new-survey\" onSubmit={SurveyFormHandler}>\r\n      <div className=\"form-group\">                 \r\n          <label>Template Name</label>                 \r\n              <input className=\"form-control\" type=\"text\" value={enteredText} onChange={textChangeHandler} />     \r\n           </div>     \r\n        {/* Multiselect */}\r\n        <div className=\"form-group\">    \r\n        <label>Applicable For:</label>          \r\n        <MultiSelect\r\n        options={props.MultiSelectValues}\r\n        value={selected}\r\n        onChange={setSelected}\r\n        labelledBy=\"Select\"\r\n      />       \r\n        </div>       \r\n      {/* Form Buttons */}\r\n      <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\">         \r\n          <button className=\"btn btn-light btn-block\" onClick={()=>history.push('/surveys-redux')}> <i className=\"fas fa-arrow-left\"></i> Cancel</button>    \r\n        </div>\r\n        <div className=\"col-md-3\">        \r\n        <button className=\"btn btn-success btn-block\" type=\"submit\" disabled={(!enteredText&&selected.length>0)||selected.length===0}>Save</button>      \r\n        </div>      \r\n      </div>\r\n    </div>     \r\n    </form>   \r\n    </div>  \r\n    </div>\r\n    </div>\r\n    {/* col ends */}\r\n        </div>\r\n        {/* row ends */}\r\n        </div>\r\n        {/* container ends */}\r\n    </section>\r\n\r\n  );\r\n};\r\nexport default NewSurvey;\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header id=\"main-header\" className=\"py-2 bg-primary text-white\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <h1>\r\n                  <i className=\"fas fa-cog\"></i> Surveys</h1>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SurveyList from \"./components/SurveyList/SurveyList\";\nimport NewSurvey from \"./components/NewSurvey/NewSurvey\";\nimport Header from './common/Header';\nimport { useSelector } from \"react-redux\";\nimport \"./App.css\";\nconst App = () => {\n  const MultiSelectValues = [\n    {  id:\"ddl_1\",label: \"self-paced modules\",value:\"spm\" },\n    {   id:\"ddl_2\",label: \"classroom modules\",value:\"cm\" },\n    {   id:\"ddl_3\",label: \"journeys\",value:\"js\" },    \n  ];  \n  const allSurveys = useSelector((state) => {\n    return state.surveyList.surveys\n  });\n  //return existing survey by id\n  const findUserHandler=(surveyId)=>{\n    const found = allSurveys.find(element => element.id === surveyId);\n    return found;\n  }  \n  \n  return (\n    <>   \n    {<div className='course-surveys'>      \n    <Header/>\n      <Router>\n        <Switch>\n          {/* home page */}\n        <Route exact path=\"/surveys-redux\" \n        render={(props)=><SurveyList \n        {...props}/>}/>  \n        {/* add new survey*/}\n          <Route exact path=\"/surveys-redux/addNewSurvey\" \n          render={(props)=><NewSurvey          \n          MultiSelectValues={MultiSelectValues}\n          {...props}/>}/>      \n          {/* edit survey*/}\n          <Route exact path=\"/surveys-redux/editSurvey/:surveyId\" \n          render={(props)=><NewSurvey          \n          findUserHandler={findUserHandler} \n          MultiSelectValues={MultiSelectValues}\n          {...props}/>}/>\n        </Switch>\n      </Router>\n    </div>\n    }\n    </>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <Provider store={store}>\n  <App />\n</Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}